# health_app/models.py
from django.db import models
from django.contrib.auth.models import AbstractUser
from django.conf import settings

# --- MODEL ORDER: DEFINE PARENTS BEFORE CHILDREN ---

# 1. Hospital Model
# This is defined first as it has no dependencies on other models in this file.
class Hospital(models.Model):
    name = models.CharField(max_length=200, unique=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name

    def get_doctors(self):
        """Returns a queryset of all users who are doctors in this hospital."""
        # Note: The related name from User.hospital is 'user_set' by default, or 'users' if we set it.
        # Let's add a related_name to the User.hospital field for clarity.
        return self.users.filter(role=User.Role.DOCTOR)


# 2. Custom User Model
# This depends on `Hospital`, so it comes second.
class User(AbstractUser):
    class Role(models.TextChoices):
        HOSPITAL_ADMIN = "HOSPITAL_ADMIN", "Hospital Admin"
        DOCTOR = "DOCTOR", "Doctor"

    role = models.CharField(max_length=50, choices=Role.choices)
    # Added related_name='users' to make hospital.users.all() work.
    hospital = models.ForeignKey(Hospital, on_delete=models.CASCADE, null=True, blank=True, related_name='users')


# 3. Patient Record Model
# This depends on `Hospital` and `User`.
class PatientRecord(models.Model):
    patient_identifier = models.CharField(max_length=100, help_text="A unique ID for the patient (e.g., P001, MRN-456)")
    hospital = models.ForeignKey(Hospital, on_delete=models.CASCADE, related_name="patient_records")
    uploaded_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, related_name="uploaded_records")

    # Blood Test Markers
    glucose = models.FloatField(null=True, blank=True)
    hba1c = models.FloatField(null=True, blank=True)
    total_cholesterol = models.FloatField(null=True, blank=True)
    ldl = models.FloatField(null=True, blank=True)
    hdl = models.FloatField(null=True, blank=True)
    triglycerides = models.FloatField(null=True, blank=True)
    alt = models.FloatField(null=True, blank=True)
    ast = models.FloatField(null=True, blank=True)
    creatinine = models.FloatField(null=True, blank=True)
    urea = models.FloatField(null=True, blank=True)
    crp = models.FloatField(null=True, blank=True)
    wbc = models.FloatField(null=True, blank=True)

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        unique_together = ('hospital', 'patient_identifier')
        ordering = ['-created_at'] # Good practice to have a default order

    def __str__(self):
        return f"Record for {self.patient_identifier} at {self.hospital.name}"


# 4. Risk Assessment Model
# This depends on `PatientRecord` and `User`.
class RiskAssessment(models.Model):
    class Status(models.TextChoices):
        PENDING_REVIEW = "PENDING_REVIEW", "Pending Review"
        REVIEWED = "REVIEWED", "Reviewed"
        NEEDS_INFO = "NEEDS_INFO", "Needs More Info"

    patient_record = models.OneToOneField(PatientRecord, on_delete=models.CASCADE, related_name="assessment")
    ai_generated_report = models.TextField(help_text="The risk assessment report generated by the AI.")
    doctor_comments = models.TextField(blank=True, null=True, help_text="Comments and final assessment by the doctor.")
    status = models.CharField(max_length=50, choices=Status.choices, default=Status.PENDING_REVIEW)
    reviewed_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True, related_name="reviewed_assessments")
    reviewed_at = models.DateTimeField(null=True, blank=True)

    # --- CONSOLIDATED DEFINITION for assigned_doctor ---
    assigned_doctor = models.ForeignKey(
        settings.AUTH_USER_MODEL, # Use settings.AUTH_USER_MODEL for consistency
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='assigned_assessments',
        limit_choices_to={'role': User.Role.DOCTOR},
        help_text="The doctor assigned to review this assessment."
    )

    def __str__(self):
        return f"Assessment for {self.patient_record.patient_identifier} - {self.status}"