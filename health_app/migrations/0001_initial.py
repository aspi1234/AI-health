# Generated by Django 5.2.4 on 2025-07-03 21:03

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Hospital',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('HOSPITAL_ADMIN', 'Hospital Admin'), ('DOCTOR', 'Doctor')], max_length=50)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('hospital', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='health_app.hospital')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PatientRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient_identifier', models.CharField(help_text='A unique ID for the patient (e.g., P001, MRN-456)', max_length=100)),
                ('glucose', models.FloatField(blank=True, null=True)),
                ('hba1c', models.FloatField(blank=True, null=True)),
                ('total_cholesterol', models.FloatField(blank=True, null=True)),
                ('ldl', models.FloatField(blank=True, null=True)),
                ('hdl', models.FloatField(blank=True, null=True)),
                ('triglycerides', models.FloatField(blank=True, null=True)),
                ('alt', models.FloatField(blank=True, null=True)),
                ('ast', models.FloatField(blank=True, null=True)),
                ('creatinine', models.FloatField(blank=True, null=True)),
                ('urea', models.FloatField(blank=True, null=True)),
                ('crp', models.FloatField(blank=True, null=True)),
                ('wbc', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('hospital', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_records', to='health_app.hospital')),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('hospital', 'patient_identifier')},
            },
        ),
        migrations.CreateModel(
            name='RiskAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ai_generated_report', models.TextField(help_text='The risk assessment report generated by the AI.')),
                ('doctor_comments', models.TextField(blank=True, help_text='Comments and final assessment by the doctor.', null=True)),
                ('status', models.CharField(choices=[('PENDING_REVIEW', 'Pending Review'), ('REVIEWED', 'Reviewed'), ('NEEDS_INFO', 'Needs More Info')], default='PENDING_REVIEW', max_length=50)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('assigned_doctor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_assessments', to=settings.AUTH_USER_MODEL)),
                ('patient_record', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='assessment', to='health_app.patientrecord')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_assessments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
